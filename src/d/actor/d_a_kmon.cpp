//
// Generated by dtk
// Translation Unit: d_a_kmon.cpp
//

#include "d/actor/d_a_kmon.h"
#include "d/d_procname.h"
#include "d/d_priority.h"
#include "d/d_com_inf_game.h"
#include "f_op/f_op_actor_mng.h"

/* 00000078-00000118       .text set_mtx__8daKmon_cFv */
void daKmon_c::set_mtx() {
    /* Nonmatching */
}

/* 00000118-00000138       .text CheckCreateHeap__FP10fopAc_ac_c */
static void CheckCreateHeap(fopAc_ac_c* obj) {
    ((daKmon_c*)obj)->CreateHeap();
}

/* 00000138-00000324       .text CreateHeap__8daKmon_cFv */
void daKmon_c::CreateHeap() {
    /* Nonmatching */
}

/* 00000324-000003FC       .text CreateInit__8daKmon_cFv */
void daKmon_c::CreateInit() {
    /* Nonmatching */
}

/* 000003FC-000006E8       .text checkTalk__8daKmon_cFv */
void daKmon_c::checkTalk() {
    /* Nonmatching */
}

/* 000006E8-000007F8       .text daKmonCreate__FPv */
static s32 daKmonCreate(void*) {
    /* Nonmatching */
}

/* 00000968-00000998       .text daKmonDelete__FPv */
static BOOL daKmonDelete(void*) {
    /* Nonmatching */
}

/* 00000998-00000A00       .text daKmonExecute__FPv */
static BOOL daKmonExecute(void* obj) {
    daKmon_c* kmon = (daKmon_c*)obj;

    kmon->checkTalk();
    fopAcM_posMoveF(kmon, 0);
    kmon->field_0x2C0.CrrPos(*dComIfG_Bgsp());
    kmon->field_0x2B0.play();
    kmon->field_0x29C.play();
    kmon->set_mtx();

    return FALSE;
}

/* 00000A00-00000A9C       .text daKmonDraw__FPv */
static BOOL daKmonDraw(void*) {
    /* Nonmatching */
}

/* 00000A9C-00000AA4       .text daKmonIsDelete__FPv */
static BOOL daKmonIsDelete(void*) {
    return TRUE;
}

static actor_method_class daKmonMethodTable = {
    (process_method_func)daKmonCreate,
    (process_method_func)daKmonDelete,
    (process_method_func)daKmonExecute,
    (process_method_func)daKmonIsDelete,
    (process_method_func)daKmonDraw,
};

actor_process_profile_definition g_profile_Kmon = {
    /* LayerID      */ fpcLy_CURRENT_e,
    /* ListID       */ 0x0007,
    /* ListPrio     */ fpcPi_CURRENT_e,
    /* ProcName     */ PROC_Kmon,
    /* Proc SubMtd  */ &g_fpcLf_Method.base,
    /* Size         */ sizeof(daKmon_c),
    /* SizeOther    */ 0,
    /* Parameters   */ 0,
    /* Leaf SubMtd  */ &g_fopAc_Method.base,
    /* Priority     */ PRIO_Kmon,
    /* Actor SubMtd */ &daKmonMethodTable,
    /* Status       */ fopAcStts_NOCULLEXEC_e | fopAcStts_CULL_e | fopAcStts_UNK40000_e,
    /* Group        */ fopAc_ACTOR_e,
    /* CullType     */ fopAc_CULLBOX_4_e,
};
